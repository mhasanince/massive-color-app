{"version":3,"sources":["Navbar.js","ColorBox.js","Palette.js","colorHelpers.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","format","props","open","handleFormatChange","evt","setState","target","value","changeFormat","closeSnackbar","this","level","changeLevel","className","to","defaultValue","min","max","step","onAfterChange","Select","onChange","MenuItem","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","id","toUpperCase","ContentProps","action","Fragment","IconButton","key","aria-label","color","onClick","Close","Component","ColorBox","isCopied","changeCopyState","setTimeout","background","name","text","onCopy","style","backgroundColor","Palette","palette","colors","emoji","colorBoxes","map","idx","levels","generatePalette","starterPalette","newPalette","paletteName","hexColor","numberOfColors","scale","chroma","darken","hex","getRange","mode","reverse","i","push","toLowerCase","replace","rgb","css","rgba","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.809d726c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Select, MenuItem, Snackbar, IconButton } from '@material-ui/core';\nimport { Close } from '@material-ui/icons';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport './styles/Navbar.css';\n\nexport default class Navbar extends Component {\n  state = {\n    format: this.props.format,\n    open: false,\n  };\n\n  handleFormatChange = (evt) => {\n    this.setState({\n      format: evt.target.value,\n      open: true,\n    });\n    this.props.changeFormat(evt.target.value);\n  };\n  closeSnackbar = () => {\n    this.setState({\n      open: false,\n    });\n  };\n  render() {\n    const { format, open } = this.state;\n    const { level, changeLevel } = this.props;\n    return (\n      <header className=\"Navbar\">\n        <div className=\"logo\">\n          <Link to=\"/\">React Color Picker</Link>\n        </div>\n        <div className=\"slider-container\">\n          <span>Level: {level}</span>\n          <div className=\"slider\">\n            <Slider\n              defaultValue={level}\n              min={100}\n              max={900}\n              step={100}\n              onAfterChange={changeLevel}\n            />\n          </div>\n        </div>\n        <div className=\"select-container\">\n          <Select value={format} onChange={this.handleFormatChange}>\n            <MenuItem value=\"hex\">HEX - #ffffff</MenuItem>\n            <MenuItem value=\"rgb\">RGB - (255, 255, 255)</MenuItem>\n            <MenuItem value=\"rgba\">RGBA - (255, 255, 255, 1)</MenuItem>\n          </Select>\n        </div>\n        <Snackbar\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n          open={open}\n          autoHideDuration={6000}\n          onClose={this.closeSnackbar}\n          message={\n            <span id=\"message-id\">Format change to {format.toUpperCase()}</span>\n          }\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          action={\n            <React.Fragment>\n              <IconButton\n                key=\"close\"\n                aria-label=\"close\"\n                color=\"inherit\"\n                onClick={this.closeSnackbar}\n              >\n                <Close />\n              </IconButton>\n            </React.Fragment>\n          }\n        />\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport './styles/ColorBox.css';\n\nexport default class ColorBox extends Component {\n  state = {\n    isCopied: false,\n  };\n\n  changeCopyState = () => {\n    this.setState(\n      {\n        isCopied: true,\n      },\n      () => {\n        setTimeout(() => {\n          this.setState({\n            isCopied: false,\n          });\n        }, 1500);\n      }\n    );\n  };\n\n  render() {\n    const { background, name } = this.props;\n    const { isCopied } = this.state;\n    return (\n      <CopyToClipboard text={background} onCopy={this.changeCopyState}>\n        <div style={{ backgroundColor: background }} className=\"ColorBox\">\n          <div\n            style={{ backgroundColor: background }}\n            className={`copy-overlay ${isCopied && 'show'}`}\n          />\n          <div className={`copy-message ${isCopied && 'show'}`}>\n            <h1>Copied!</h1>\n            <p>{background}</p>\n          </div>\n          <div className=\"ColorBox-copy-container\">\n            <span className=\"ColorBox-name\">{name}</span>\n            <button className=\"ColorBox-copy\">Copy</button>\n          </div>\n          <span className=\"ColorBox-more\">MORE</span>\n        </div>\n      </CopyToClipboard>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport ColorBox from './ColorBox';\nimport './styles/Palette.css';\n\nexport default class Palette extends Component {\n  state = {\n    level: 500,\n    format: 'hex',\n  };\n\n  changeLevel = (level) => {\n    this.setState({\n      level: level,\n    });\n  };\n\n  changeFormat = (format) => {\n    this.setState({\n      format: format,\n    });\n  };\n\n  render() {\n    const { colors, name, emoji } = this.props.palette;\n    const { level, format } = this.state;\n    const colorBoxes = colors[level].map((color, idx) => (\n      <ColorBox key={idx} background={color[format]} name={color.name} />\n    ));\n    return (\n      <div className=\"Palette\">\n        <Navbar\n          level={level}\n          format={format}\n          changeLevel={this.changeLevel}\n          changeFormat={this.changeFormat}\n        />\n        <div className=\"Palette-colors\">{colorBoxes}</div>\n        <footer className=\"Palette-footer\">\n          <span className=\"Palette-name\">{name}</span>\n          <span className=\"Palette-emoji\">{emoji}</span>\n        </footer>\n      </div>\n    );\n  }\n}\n","import chroma from 'chroma-js';\nconst levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\n\nfunction generatePalette(starterPalette) {\n  let newPalette = {\n    name: starterPalette.paletteName,\n    id: starterPalette.id,\n    emoji: starterPalette.emoji,\n    colors: {},\n  };\n  for (let level of levels) {\n    newPalette.colors[level] = [];\n  }\n  for (let color of starterPalette.colors) {\n    let scale = generateScale(color.color, 10).reverse();\n    for (let i in scale) {\n      newPalette.colors[levels[i]].push({\n        name: `${color.name} ${levels[i]}`,\n        id: color.name.toLowerCase().replace(/ /g, '-'),\n        hex: scale[i],\n        rgb: chroma(scale[i]).css(),\n        rgba: chroma(scale[i]).css('rgba'),\n      });\n    }\n  }\n  return newPalette;\n}\n\nfunction getRange(hexColor) {\n  const end = '#fff';\n  return [\n    chroma(hexColor)\n      .darken(1.4)\n      .hex(),\n    hexColor,\n    end,\n  ];\n}\n\nfunction generateScale(hexColor, numberOfColors) {\n  return chroma\n    .scale(getRange(hexColor))\n    .mode('lab')\n    .colors(numberOfColors);\n}\n\nexport { generatePalette };\n","import React, { Component } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport Palette from './Palette';\nimport { generatePalette } from './colorHelpers';\n\nexport default class Routes extends Component {\n  render() {\n    const getPalette = (props) => {\n      let id = props.match.params.id;\n      let currentPalette = this.props.palettes.find(\n        (palette) => palette.id.toLowerCase() === id.toLowerCase()\n      );\n      return <Palette palette={generatePalette(currentPalette)} {...props} />;\n    };\n    return (\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <ol>\n              <li>\n                <Link to=\"/palette/material-ui-colors\">\n                  /material-ui-colors\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/palette/flat-ui-colors-v1\">/flat-ui-colors-v1</Link>\n              </li>\n              <li>\n                <Link to=\"/palette/flat-ui-colors-dutch\">\n                  /flat-ui-colors-dutch\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/palette/flat-ui-colors-american\">\n                  /flat-ui-colors-american\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/palette/flat-ui-colors-aussie\">\n                  /flat-ui-colors-aussie\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/palette/flat-ui-colors-british\">\n                  /flat-ui-colors-british\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/palette/flat-ui-colors-indian\">\n                  /flat-ui-colors-indian\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/palette/flat-ui-colors-french\">\n                  /flat-ui-colors-french\n                </Link>\n              </li>\n            </ol>\n          )}\n        />\n        <Route exact path=\"/palette/:id\" render={getPalette} />\n      </Switch>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Routes from './Routes';\nimport seedColors from './seedColors';\n\nexport default class App extends Component {\n  render() {\n    return <h1>Homepage</h1>;\n    // return <Routes palettes={seedColors} />;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}